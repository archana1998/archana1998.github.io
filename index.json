[{"authors":["admin"],"categories":null,"content":"Hi! I am Archana Swaminathan, a final year undergraduate student at BITS Pilani, Hyderabad, India. I am currently working as a Visiting Researcher with the V-SENSE Research Group, Trinity College Dublin , and being mentored by Prof. Aljosa Smolic. I\u0026rsquo;m part of a group that is investigating 3D Geometry for Deep Learning, where we focus on applications that extend to Image-based reconstruction, pose estimation and visual computing.\nIn the past, I\u0026rsquo;ve had experience with working with Deep Learning in many projects, some of which are: predictive modelling for time series data, image encryption and decryption, compressive image sensing and denoising, semantic segmentation and object recognition.\nI\u0026rsquo;m very interested in research in the areas of Image Processing and Computer Vision, and wish to explore different applications in these fields as I motivate and prepare myself for a career as a researcher.\nIn my free time, I like to read books, play badminton and work out. I love travelling and eating different desserts that mostly comprise of chocolate. I can\u0026rsquo;t wait to go exploring once this pandemic is done!\nI\u0026rsquo;m actively looking for Research Assistantship / PhD opportunities starting fall 2021. Do get in touch with me if you\u0026rsquo;re up for a chat!\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://archana1998.github.io/author/archana-swaminathan/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/archana-swaminathan/","section":"authors","summary":"Hi! I am Archana Swaminathan, a final year undergraduate student at BITS Pilani, Hyderabad, India. I am currently working as a Visiting Researcher with the V-SENSE Research Group, Trinity College Dublin , and being mentored by Prof.","tags":null,"title":"Archana Swaminathan","type":"authors"},{"authors":["Archana Swaminathan"],"categories":["Experiences"],"content":"This article has been written from notes I took throughout the Opening Keynote at the Google AI Summer School. The opening keynote was delivered by Jeff Dean, Head of Google AI and moderated by Manish Gupta, Director of Google AI Research, Bangalore.\nIntroduction Jeff Dean is a Senior Fellow at Google and the global head of Google AI. He saved Google at a very critical time and is essential to what contributed to make the Google Search Engine the best and the fastest in the world today. He is currently doing exciting research in the field of explainable AI for problems that the world is facing. He also helped create Tensorflow, the world\u0026rsquo;s most used Machine Learning Library.\nNotes from the Talk: Deep Learning has revolutionized the way of solving challenging problems. There are over 130 new papers on Machine Learning on Arxiv every day. Deep Learning can be considered a modern reincarnation of Artificial Neural Networks. Key benefits and features of Deep Learning are:\n Availability of new network architectures Ability to scale to larger datasets and efficient computation of the math Learns features from raw, noisy, heterogenous data No explicit feature engineering required  Deep Learning architectures are remarkably flexible with taking in inputs and giving outputs of various forms, some examples are getting a categorical label from a pixel input (image), an audio input translating to a phrase that is a string, and language translation from one language to another.\nDeep Learning has also helped us come up with solutions to problems where the computer can achieve better results than a human. One such example is the Imagenet challenge, that Stanford conducts every year that classifies images into classes.\n In 2011, the winner of the challenge was able to achieve 26% error, where humans were able to do the same task with 5% error. In 2012, Geoffrey Hinton and his team used Deep Learning for the very first time in this challenge, and was the pioneer of bringing deep convolutional networks for the image classification task. Following his attempt, Deep Learning became very popular in further editions of the challenge. In 2017, the winner of the challenge was able to achieve 3% error on the Imagenet dataset, finally beating the human error of 5%.  ","date":1597901033,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597901033,"objectID":"b3c6a1437ac92b7901b23733b78642a2","permalink":"https://archana1998.github.io/post/opening-keynote/","publishdate":"2020-08-20T10:53:53+05:30","relpermalink":"/post/opening-keynote/","section":"post","summary":"This article has been written from notes I took throughout the Opening Keynote at the Google AI Summer School. The opening keynote was delivered by Jeff Dean, Head of Google AI and moderated by Manish Gupta, Director of Google AI Research, Bangalore.","tags":["Google AI Summer School","Machine Learning","Deep Learning"],"title":"Opening Keynote at the Google AI Summer School, 2020","type":"post"},{"authors":["Archana Swaminathan","Rushabh Musthayala"],"categories":["Experiences"],"content":"Flipkart recently concluded their 2 month long annual hackathon for students of Indian engineering colleges. This year’s edition saw over 20,000 participants and boasted of a prize pool of around Rs. 300,000 (-4000 USD). Our team (Gradient Ascent) made it to the 3rd round of the competition and I am writing about our experience in this article.\nProblem Statement A fashion retailer wants to source ongoing and upcoming fashion trends from major online fashion portals and online magazines in a consumable and actionable format, so that they are able to effectively and efficiently design an upcoming fashion product portfolio.\nDeliverables:\n Identify products that are better performers (in a rank ordered fashion) Help the user view the products that are both trending and lagging Identify a logic for classifying products as per their trendiness  We were asked to complete the challenge for just the t-shirt product vertical, but to ensure that our solution would be scalable to other products as well.\nInitial Analysis We started off by performing a literature review on current research in the field of fashion with respect to deep learning. We looked at previous attempts of learning attributes from fashion images, modelling trends as timeseries data, fashion image encodings, object detection, etc.\nAfter spending some time on our research, we split the problem into the following subproblems to tackle independently:\n Data Collection Object Detection Attribute/Feature learning Ranking Grouping (trending/lagging)  Data Collection According to the problem statement, we had to extract data from e-Commerce sites and other fashion portals and magazines. We tried our best to include data from all those categories to ensure we had a balanced dataset for our classification and ranking later on. After scouring the web for some good resources, we finally settled on the following:\n Flipkart Amazon Pinterest (curated collections of fashion trends) Vogue India Myntra  We felt this combination of multipurpose e-Commerce sites, well established fashion magazines, social network sites and dedicated fashion shopping sites would ensure we had good representation from all sectors. We collected an average of around 600 images from each website, giving us a total of 3000 to work with. Web scraping was done in Python using the Selenium framework. The scripts used to scrape data from any website were pretty similar and any new sites could be added with minor modifications, hence this step was easily scalable. From e-commerce sites, we scraped the images, product names, ratings and the number of reviews to with ranking later on. From the other portals, we extracted just the images.\nObject Detection One of the biggest problems we faced when extracting images from fashion magazines and social media sites is that they don’t limit themselves to just t-shirts. When they put out a catalogue/collection, it has everything ranging from skirts to sweaters to scarves. Furthermore, even in pictures where the shirt was the highlight, other features such as the model’s pose, skin colour and distance from the camera could confuse our model in the later stages of this project. Keeping all this in mind, we decided to use an object detection model to filter our data to ensure we had only pictures of t-shirts. Additionally, we cropped the images according to their bounding boxes to counter the other aforementioned problems. This was done using a pretrained YOLOv3 model trained on the DeepFashion2 dataset, implemented using PyTorch.\nAttribute/Feature learning This is where we faced our major setback. Our initial plan was to train a model to learn the attributes (neck type, sleeve length, patterns, etc) and to return them back for later use. We were then going to perform FP growth on our set of attributes of each image to obtain the frequent itemsets which would correspond to the most common combination of features and hence, trending/popular styles.\nIt didn\u0026rsquo;t work out however, as we couldn’t find an appropriate dataset to work with such a task given our time constraints so we had to try out our backup plan.\nOur plan involved getting numeric encodings for the fashion images in place of the attribute list and performing clustering on the encodings. The largest clusters would correspond to the most popular types of clothes, and similarly, the smallest clusters would represent the lagging ones, assuming our calculated encodings are a fair representation of the original image. Since we were working with just images (unlabeled) data, we had to devise an unsupervised approach for learning the image encodings. After considering various options, we decided to go ahead using an autoencoder based on a CNN architecture. We did this for 2 major reasons:\n Convolutional layers would help notice particular features of t-shirts such as the necktype length and patterns if any We can insight on how accurate our encodings to reconstruct the image  Here’s a summary of the model we used:\nFrequent Itemset Mining   We then plotted some of the reconstructed images side by side with their original counterparts and got pretty good results considering the simplicity of the network and size of the dataset. The encodings were able to capture some important features of the clothes in question.\nModel Architecture   Ranking As far as e-commerce sites go, there are 2 main criteria used to determine how “good” a product is – the number of reviews and the rating it has. What would you consider to be better? 10 reviews with a 5-star rating? Or 50 reviews with a 4.7-star rating? This was the major question we had to answer to be able to rank these products properly. We needed an effective way of combining these 2 into one reliable metric. After doing some research on this area and tying out different methods of combing them, we settled with an approach based on a Bayesian view of the beta distribution, described beautifully in this video by 3blue1brown We used this principle to come up with our own “Popularity Metric” which was calculated as follows:\nReconstructed Images from encodings   We now had a mechanism to compare and rank products effectively and a way to calculate accurate image encodings. We used both of these to train a model which predicts the Popularity Metric of a given clothing item given an input as the image encoding. We envisioned such a model to be extremely useful for designers that are looking for insight as to how their clothes might fair if they were put up for sale on e-commerce websites. Furthermore, the Popularity Metric could be calculated for all the images from magazines and portals like Vogue and Pinterest, so those products can be ranked and compared too! The architecture, simplified pipeline and a screenshot of the program in action are shared below.\nPopularity Metric    (n = number of reviews, s = star rating )  Popularity Metric Model   Grouping Since the FP growth idea fell through the roof, we went with clustering as our method of choice for grouping products in such a way that we can obtain the trending and lagging items. To ensure our clustering was done well, we experimented on a variety of clustering algorithms and chose the one with the highest silhouette coefficient. The algorithms tested were –\n K means Gaussian mixture model DBSCAN Mini batch k means Spectral clustering  Among those, K means had the highest silhouette efficient so we went ahead with that. We then split the data into clusters according to how many images were being considered for clustering (no. of clusters = no. of images/10). The products in the largest cluster could be inferred as the trending/popular products and those in the smallest clusters would be lagging products. We gave the user the option to spec which sources they wanted to consider for their clustering, giving them more flexibility with regards to analyzing what’s not and what’s not (what’s trending on Vogue might not be popular on Amazon).\nTo conclude, we were able to come up with a way to rank products properly and to group them based on whether they are trending or lagging. We also ensured that our solution is scalable on 2 fronts:\n Getting more data can be done easily with minor modifications to the existing script We can expand to different product verticals by changing the object of interest in the object detection model  The link to the GitHub Repo is at the top of this page. Hope you found this interesting, thanks for reading!\n","date":1597666172,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597666172,"objectID":"5e2270a05581471e88f667d7451c48d0","permalink":"https://archana1998.github.io/post/flipkart-grid/","publishdate":"2020-08-17T17:39:32+05:30","relpermalink":"/post/flipkart-grid/","section":"post","summary":"An article about our experience of taking part in our first hackathon","tags":["Machine Learning","Computer Vision"],"title":"Flipkart Grid 2.0 Hackathon","type":"post"},{"authors":["Archana Swaminathan"],"categories":["Undergraduate Projects"],"content":"Presented our work at the 54th Canadian CMOS conference, 2020.  Worked under the supervision of Dr. S Radhika, of the Department of Electrical and Electronics Engineering, BITS Pilani. Manuscript accepted and to be published.\n","date":1597592547,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597592547,"objectID":"c7ff7d07ddaf566b360c64808b8ec014","permalink":"https://archana1998.github.io/project/damage-detection/","publishdate":"2020-08-16T21:12:27+05:30","relpermalink":"/project/damage-detection/","section":"project","summary":"Used ConvNets to detect tornado damage done to buildings, using semantic segmentation.","tags":["Computer Vision","Machine Learning"],"title":"Structural Damage Detection using ConvNets","type":"project"},{"authors":["Archana Swaminathan"],"categories":["Undergraduate Projects"],"content":"Introduction Gesture Recognition Systems are commonly utilized as an interface between computers and humans, along with interacting with many electronic instruments. These systems can be classified into three classes as follows:\n Motion-based: When the user holds a device or a controller that detects the gesture made. Touch-based: When the system includes a touch-screen and the positions and directions of the finger or equivalent tool of the user are mapped, thus recognizing the gesture. Vision-based: When the system makes use of image and signal processing to detect gestures made without touching any device.  The first two types of systems need the users to hold and contact certain devices, for the gesture recognition, and vision-based systems use camera setups, image processing and techniques that involve computer vision. These systems are difficult to set up for small scale use and are also expensive and extremely power hungry. For building a system that needs to function when there are limited resources available, it is important that the setup cost, power consumption and ease and size of setup is taken into consideration. Keeping this in mind, we have built a contactless gesture recognition system that consists of a couple of digital infrared sensors, that have been programmed to do the gesture recognition using a custom algorithm, with an Arduino Uno Microcontroller.\nProblem Solving Methodology Components Used and Setup: The components we used are:\n Breadboard Arduino Uno Microcontroller 2 digital IR Sensors Jumper wires Laptop for interfacing Languages used: Arduino IDE (Based on C++) Python (for interfacing sensor output with VLC)  Setup   We connected two IR sensors to the Breadboard, placed at a distance of approximately 3 cm from each other. These were then interfaced with the Arduino Uno, which was connected to the laptop.\nVoltage is applied to the pair of IR LEDs, which in succession emit Infrared light. This light propagates through the air and once it hits the hand (or object), which acts as a hurdle, it is reflected back to the receiver. The LED on the diode glows, thus indicating that an object has been detected.\nA digital sensor system consists of the sensor itself, a cable, and a transmitter. The sensor has an electronic chip. The measuring signal is directly converted into a digital signal inside the sensor. The data transmission through the cable is also digital. This digital data transmission is not sensitive to cable length, cable resistance or impedance.\nUsing the concept of states and delay as in Digital Design, we have created two states of the two sensors each placed on the left and right. These two states are defined and calibrated using a time delay of a few hundred microseconds in the gesture classification algorithm written using the Arduino IDE.\nWe have taken two states in the algorithm into consideration namely Q(t) and Q(t+d) where d is the delay defined. The algorithm is defined such that left sensor and right sensor digital values are checked first and then after the defined delay, both sensors are checked for their Boolean values again and therefore the gesture is recognized and printed on the screen after running the code in the Arduino software. The chip on the Arduino Uno board plugs straight into the laptop’s USB port and supports the computer as a virtual serial port.\nState table   To make the gesture recognition feature interactive, we have interfaced the output with VLC Media player, so that we can pause, play and rewind/go forward with the playback. To do this interfacing, we have written a Python script, importing the Python library pyautogui, that provides functionality of control of the computer’s keyboard.\nResults and Conclusions We tested the gesture recognition system for accuracy by using the precision-recall matric. We took in 30 different samples for input. The precision is calculated as TP/(TP+FP), where TP denotes the number of true positives and FP denotes the number of false positives. The precision of our system is = 90% (27 TPs and 3 FPs)\nThe recall is calculated as TP/(TP+FN), where TP denotes the number of true positives, and FN denotes the number of false negatives. The recall of our system is = 86.6% (26 TPs and 4 FNs)\nHigh precision implies that there is less chances of getting false alarms, and recall expresses the ability to find all relevant information from the dataset. Practical Applications We have integrated the recognition system with VLC, to control playback of the video. Similarly, the setup can easily be integrated with any mobile device that is low on resources, as well as used with complex devices, as IR sensors are fundamental in building light reflection systems and are extremely versatile.\nFurther scope  Friendly user interface that can be easily understood by any user and eventually its application can be extended to more applications like PDF reader, video games etc. Computationally inexpensive and low power consuming hardware and software setup, that makes it ideal for integrating with any device, both simple and complex.  Limitations  Ambient light obstructs the functioning as is the case with infrared sensors, as they are extremely sensitive. A proper optical barrier must be used to prevent this. We have assumed values of time delays between gestures according to what worked well for our test dataset. This leads to the system being slightly inflexible with different speeds of gestures.  ","date":1597555992,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597555992,"objectID":"eeeaa0beb10035c11ba6cc5daaa06b5e","permalink":"https://archana1998.github.io/project/gesture-recognition/","publishdate":"2020-08-16T11:03:12+05:30","relpermalink":"/project/gesture-recognition/","section":"project","summary":"A contactless gesture recognition system that uses IR Proximity Sensors to classify different hand gestures. Interfaced with VLC Media player to pause and play videos.","tags":["Electronics","Signal Processing"],"title":"Contactless Gesture Recognition","type":"project"},{"authors":["Archana Swaminathan"],"categories":["Undergraduate Projects"],"content":"Introduction This project is inspired from the schematic described in the paper by I. A. Ismail and Galal H. Galal-Edeen. A multilayer perceptron network is used for both the encryption and decryption of images. The keys used for decryption are the fixed bias vectors, which remain constant throughout training. Multiplicative neural networks are used to help generate this constant vector, which is derived from a vector specified by the sender. The images are sent into the neural network and the output of the hidden layer gives the cipher. The cipher on being passed into the output layer gives the decrypted image. The weights are trained and updated using the backpropagation algorithm for learning, while the bias vector remains constant.\nTo get the constant bias vectors, the sender of the image specifies a numeric vector of the same size as the layer it is a bias of. The vector is broken down into subvectors and subsequent permutations of this vector are fed into a multiplicative neuron. The output of the multiplicative neural network will be added to the initial bias vector specified by the sender of the images. Since the bias vector is now a constant that is entirely dependent on the way the initial 6bias vector is arranged, it provides an additional level of security over the existing paradigm that employs a sender specified bias vector without any modifications done to it. All experiments have been done on, and results have been obtained from MATLAB R2018b.\nMultiplicative Neural Network A general structure for the multiplicative neuron is given below:\nStructure of multiplicative neuron   The input vector is (x 1 , x 2 ,\u0026hellip;..,x n ) which is a permutation of the initial specified bias vector. The weights vector is (w 1 , w 2, \u0026hellip;.., wn) and the bias vector (for this multiplicative neural network) is (b 1 , b 2, \u0026hellip;.., bn). Ω is a multiplicative operator and has the formula\n$$\\Omega=\\prod_{i=1}^{n}\\left(w_{i} x_{i}+b_{i}\\right)$$\nThe output of the neuron is then processed using ƒ(u) which is the logsig function $y=\\frac{1}{1+e^{-u}}$.\nTraining Algorithm The standard backpropagation algorithm has been modified for the training of the multiplicative neural network, which is used in optimizing the weights and biases. It is based on the popular steepest gradient descent approach. The error function E is defined as\n$$E=\\frac{1}{2 N} \\sum_{p=1}^{N}\\left(y_{p}-y_{p}^{d}\\right)^{2}$$\nwhere $\\ y_{p}^{d}$ is the desired output and yp is the actual output for the p th input that is fed into the multiplicative neural network. The weights and biases of the model are updated using the following rules:\n$$w_{i}^{\\text {new}}=w_{i}^{\\text {old}}+\\Delta w_{i}$$\n$$b_{i}^{\\text {new}}=b_{i}^{\\text {old}}+\\Delta b_{i}$$\nwhere\n$$\\Delta w_{i}=-\\eta \\frac{d \\boldsymbol{E}}{d w_{i}}=-\\eta \\frac{1}{N} \\sum_{p=1}^{N}\\left(\\left(y_{p}-y_{p}^{d}\\right) y_{p}\\left(1-y_{p}\\right) \\frac{u}{w_{i} x_{i}+b_{i}} x_{i}\\right)$$\n$$\\Delta b_{i}=-\\eta \\frac{d \\boldsymbol{E}}{d b_{i}}=-\\eta \\frac{1}{N} \\sum_{p=1}^{N}\\left(\\left(y_{p}-y_{p}^{d}\\right) y_{p}\\left(1-y_{p}\\right) \\frac{u}{w_{i} x_{i}+b_{i}}\\right)$$\n$\\eta$ is the learning rate parameter. The main purpose of this parameter is to control the convergent speed as desired.\nProcedure Two multiplicative neural network structures are used to generate the bias vector for the hidden layer and output layer of the multilayer perceptron network respectively. It is necessary to have a separate model for each vector as the layers are of different dimensions (different number of neurons) and thus, the bias vectors will be of different dimensions for both the hidden layer and the output layer. The number of elements in the bias vector will be the size of the input into the multiplicative neural network model, hence we require two different models.\nThe sender of the images first specifies a vector containing the same number of elements as the number of neurons of the (hidden/output) layer of the MLP. This is now broken down into subvectors (if the number of elements is 16, it can be broken into 4 subvectors of 4 elements each, etc.). This breaking down is essential as it becomes computationally difficult to calculate the permutations of a combination of numbers greater than 10. Once the subvectors are obtained, the individual permutations of each of the subvectors is stored into a matrix, which are then concatenated to form a bigger matrix of size p*q where p is the number of subvectors, and q is the dimension of the initially specified bias vector. A target vector (dummy vector, but must remain constant and not be generated randomly) is also specified by the sender.\nThis matrix is now fed into as input to the multiplicative neural network, where each row depicts an input sample. The network is trained using the algorithm specified, and the output is stored. This output is now added to the initial vector specified by the sender for the MLP, and the result thus becomes the new bias vector, which remains a constant throughout the experiment.\nThis procedure is repeated for defining and training the second multiplicative neural network, which generates the second bias vector for the MLP. Both these vectors are essential for proper image encryption and decryption.\nMLP used for image encryption and decryption The network has a structure of one input layer, one hidden layer, and one output layer. Adding further hidden layers can help in achieving image compression as dimensionality of the image is being reduced. The output of the hidden layer gives the cipher and the output of the output layer gives the decipher of the image. There are N elements in the input layer that are fed to the next (hidden layer), which consists of M neurons. The output layer has the same number of neurons as the input layer.\nThe MLP structure used in this project is given below.\nStructure of MLP   The network configuration is of NxMxN neurons which represent the input layer, hidden layer and output layer respectively. The sigmoid function (logsig) is used to generate the output of the hidden layer, which is defined as\n$$\\text { Logsig function: } Z=\\frac{1}{1+e^{\\left[-\\left(\\left(\\sum_{i=1}^{n} w_{1 i} x_{i}\\right)+b_{1 i}\\right)\\right]}}$$\nwhere w1i denotes the weight vector for the hidden layer, and b1i denotes the bias vector for the hidden layer.\nThe output of the output layer is calculated using a linear function (purelin in MATLAB), which is defined as\n$$\\text { Purelin function: } Y=m\\left[\\left(\\sum_{i=1}^{n} w_{2 i} z_{i}\\right)+b_{2 i}\\right]+c$$\nwhere w2i denotes the weight vector for the output layer, and b2i denotes the bias vector for the output layer.\nTraining Algorithm The error of the output of the network in each step ‘n’ while training, (the difference between the desired value and the actual value) is calculated by the following formula.\n$$\\Delta(n)=\\left[\\sum_{i=1}^{N}\\left(x_{i}-y_{i}\\right)^{2}\\right]^{1 / 2}$$\nThe weights are calculated using the following rules:\n  For the hidden-output layer:\na. The error signal for the q th neuron in the output layer is\n$$\\delta_{q}=m\\left(x_{q}-y_{q}\\right)$$\nb. The updated weight w2(p, q) is calculated as:\n$$\\begin{array}{c}w_{2(p, q)}(n+1)=w_{2(p, q)}(n)+\\Delta w_{2(p, q)}(n+1)\\end{array}$$\n$$\\begin{array}{c}\\Delta w_{2(p, q)}(n+1)=\\eta \\delta_{q} z_{p}+\\alpha\\left[\\Delta w_{2(p, q)}(n)\\right]\\end{array}$$\n  For the input-hidden layer:\na. The error signal for pth hidden neuron is calculated using:\n$$\\delta_{p}=z_{p}\\left(1-z_{p}\\right)\\left[\\sum_{k=1}^{N} \\delta_{k} w_{1(p,k)}\\right]$$\nb. The weight vector w1(i,p)(n) is calculated similarly as the above formula for the adjustment of weights, with zp being replaced with xi and $\\delta_{q}$ with $\\delta_{p}$ .\n  After one epoch, let $\\Delta(n)$ and $\\Delta(n+1)$ be the previous and current errors of the outputs of the neural network respectively. The rule that is followed whether to decide if the weights are being updated or not, is:\na. If $\\Delta(n+1)\u0026gt;1.04[\\Delta(n)]$, The new weights, output, keys (always constant), error are unchanged, and $\\alpha$ is changed to $0.7 \\alpha$\nb. If $\\Delta(n+1)\u0026lt;=1.04[\\Delta(n)]$, All the variables except the keys are updated to their new values, and $\\alpha$ is modified to $1.05 \\alpha$\n  These steps are carried out and repeated in each epoch, until the maximum number of epochs has been reached, or the error becomes less than a value that is predefined.\nProcedure The keys obtained from the multiplicative neural network are first normalized to lie within the range of (0,1). The normalization is simply done by dividing the elements of the bias vector by the maximum value of the elements of the vector.\nThe images that are fed into the neural network must all be of the same dimension, irrespective of them being training images or test images. For this project, images of various dimensions (256 x 256, 512 x 512 etc) have been scaled down to a dimension of 50 x 50. The images of this specified dimension are now segmented into sub images, of the number L (for the purpose of this project, L=100). The size of each sub image is x times x = N pixels, which makes N = 25. The segmentation is done using a custom defined segmentation function, that also converts each sub image into a 1-dimensional vector, and creates a matrix of dimension N x L (25 x 100) which is then fed in as input to the neural network.\nOnce the network is trained with the training set, it is ready to encrypt and decrypt images. The test images are segmented using the same segmentation function which was used to segment the training images, and are fed into the trained neural network as input.\nThe output of the hidden layer is computed using the output function (logsig), which was previously defined. Since the size of the input image is NL, the output of the hidden layer is a matrix of size ML. (For this project, N = 25 and M = 16). The encrypted image (cipher) is then obtained after the output matrix is transformed into a 2-D matrix, for which the segmented images must be properly arranged back.\nThe decrypted image is obtained when the output of the hidden layer is fed into the output layer. In short, it is the final output of the neural network and can directly be computed by feeding the input test image into the neural network.\nExperiments and results The project was done on MATLAB version R2018b on a computer with Intel Core i5 6 th generation processor.\nThe neural network was trained using 38 test images, out of which 14 were colour images, all downloaded from the USC Vision Database. The 14 colour images and any subsequent images henceforth used for testing were all converted into single channel images. The test images were segmented and passed into the neural network, which took approximately 40 seconds to train. The initial bias vectors were specified by the programmer and then was input into the two multiplicative neural networks to generate new elements, which were then added with the previous bias vector. Only after this, the bias vector for the MLP was fixed with this value and the MLP was made to train.\nEncryption and decryption of a test image of the Earth was extremely fast, with the NPCR and UACI tests giving scores of 99.9665% and 0.34916 respectively. The PSNR ratios for the original image with the decrypted image and the cipher were 39.4156 and 39.3973 respectively.\n","date":1596090959,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596090959,"objectID":"447045694cd9d481c0198b4259569dc0","permalink":"https://archana1998.github.io/project/encryption-decryption/","publishdate":"2020-07-30T12:05:59+05:30","relpermalink":"/project/encryption-decryption/","section":"project","summary":"Developed a novel algorithm for image encryption using Artificial Neural Networks.","tags":["Cryptography","Machine Learning"],"title":"Image Encryption and Decryption using Artificial Neural Networks","type":"project"},{"authors":["Archana Swaminathan"],"categories":["Undergraduate Projects"],"content":"Introduction The Ramanujan Sums were first proposed by Srinivasan Ramanujan in 1918, and have become exceedingly popular in the fields of signal processing,time-frequency analysis and shape recognition. The sums are by nature, orthogonal. This results in them offering excellent conservation of energy, which is a property shared by Fourier Transform as well.\nWe have used Matrix Multiplication to obtain the Ramanujan Basis, for our computation. The Ramanujan Sums are defined as nth powers of qthprimitive roots of unity, which can be computed using this simple formula:\n$$c_{q}(n)=\\mu\\left(\\frac{q}{g c d(q, n)}\\right) \\frac{\\varphi(q)}{\\varphi\\left(\\frac{q}{g c d(q, n)}\\right)}$$\nWhere $q=\\prod_{i} q_{i}^{a_{i}}$,(qi is prime). Then, $\\varphi(q)=q \\prod_{i}\\left(1-\\frac{1}{q i}\\right)$.\n$\\mu(n)$ is the Mobius function, which is equal to 0 if n contains a square number, 1 if n = 1 and (-1)*k if n is a product of k distinct prime numbers.\nThe Ramanujan matrix can be defined as:\n$$A(q, j)=\\frac{1}{\\varphi(q) M} c_{q}(\\bmod (j-1, q)+1)$$\nThe 2-D forward Ramanujan Sum Transform is given as:\n$$Y(p, q)=\\frac{1}{\\varphi(p) \\varphi(q)} \\frac{1}{M N} \\sum_{m=1}^{M} \\sum_{n=1}^{N} x(m, n) C_{p}(m) C_{q}(n)$$\nwhich in matrix terms can be defined as\n$$Y=A * A^{\\top}$$\nand the inverse 2D Ramanujan transform in matrix terms is:\n$$X=A^{-1} Y\\left(A^{-1}\\right)^{\\top}$$\nOriginal, Transformed and Inversed Image   Compressive Sensing The principle behind the use of compressive sensing as a signal processing technique, is that most test signals are not actually completely comprised of noise, but most have a great degree of redundancy in them. Sparse representation of signals in a particular domain signifies that most of the signal coefficients are either zero or close to zero.\nCompressive measurements, which are a weighed linear combination of signal samples, are first taken in a basis that is different from the sparse basis.\nAlgorithm We use the generated Ramanujan Basis to do the sparse reconstruction. First, the sparse signal is obtained by multiplyingthe Ramanujan Basis A with the flattened image vector (here we are using the Cameraman Image that has been resized to 50 * 50). Our Ramanujan Basis has dimensions of 2500 * 2500.\nThus,\n$$Z=A^{*} x$$\nWhere Z is the sparse representation of the cameraman image, and x is the flattened image vector of the original image. We next create a random measurement matrix of dimension m*n, where we keep m = 5000 and n = 2500. This measurement matrix (Phi) is then multiplied by the sparse signal z.\n$$Y=P h i * Z$$\nWe then use Orthogonal Matching Pursuit Algorithm, which aims to approximately find the most accurate projections of data in multiple dimensions on to the span of a redundant or overcomplete dictionary. Here, the overcomplete dictionary we use is the Ramanujan Basis A. The orthogonal matching pursuit algorithm is then applied onto the signal Y, and we have considered 1700 iterations.\nThe plot of the original sparse representation and the OMP representation is given below:\nPlot of original sparse representation (blue) and OMP representation (red)   The image is then reconstructed by taking the inverse of the Ramanujan Basis, and multiplying it with the OMP sparse representation.\n$$R e c =A^{-1} * x w s r$$\nWhere xwsr is the OMP representation, and Rec is the reconstructed image signal. This is then resized to obtain the final image, which has been compared with the original image below:\nOriginal and Final image   Results We compare and evaluate the performance of the Compressive Sensing Algorithm by using PSNR, SSIM and MSE image evaluation metrics.\n PSNR: Peak Signal to Noise Ratio SSIM: Structural Similarity Index MSE: Mean Square Error  Ideally, high values of PSNR, SSIM(max=1) and MSE show favourable performance of the reconstruction algorithm.The results obtained for this approach are:\n PSNR = 23.1362 SSIM = 0.6265 MSE = 315.8316  Image Denoising Image denoising is commonly analysed and solved as an inverse problem. A method of doing this is to decompose the image signal in a sparse way, over a dictionary that is overcomplete. We use the Ramanujan Dictionary here to do the denoising, which is trained with three images using the K-SVD algorithm, based on Orthogonal Matching Pursuit (OMP).\nK-SVD Algorithm The K-SVD algorithm is a type of K-means clustering, which has been generalized. The k- means clustering is also considered a method of doing representation of sparse signals. This implies solving the equation below, to find the best code to represent the signal data {yi} from i=1 to M\n$$\\min {D, X}\\left{|Y-D X|{F}^{2}\\right}, \\text { subject to } \\forall i,\\left|x_{i}\\right|_{0}=1$$\nF here is the Frobenius norm. The K-SVD algorithm is similar to the K-means in terms of the process of construction, but differs in the sense of the relaxation of the sparsity term in the constraint. This helps achieve a linear combination of the dictionary atoms. The relaxation is that the number of entries that are not zero in each column can be greater than 1, but less than a defined number T0.\nThus, the objective function hence becomes\n$$\\min {D, X}\\left{|Y-D X|{F}^{2}\\right} \\text { , subject to } \\forall i,\\left|x_{i}\\right|_{0} \\leq T_{0}$$\nIn the algorithm, the dictionary D is first fixed, and the aim is to find the perfect coefficient matrix X. To find this, a pursuit method that does the approximation of the optimal X is used. OMP was chosen as the suitable method to calculate the coefficients of the matrix here.\nImplementation and Results In the implementation for training the dictionary nd the sparse data representation, the parameters for the training are as follows:\n Patch Size = 15 Percentage of Overlap = 0.5 Sparsity Threshold = 6 Error Tolerance = 11.5 Three images, Boat, Lena and Barbara were used for the dictionary training. Patches were made of these images and stacked. The number of iterations was the size of the stacked images that formed the training data. In this case, the number was 2883. The dictionary and sparse data representation were trained using the K-SVD algorithm and saved, the training process took approximately 5.5 hours on an Intel i5 6 th gen processor, with a Nvidia 940mx GPU (personal laptop, using MATLAB R2019a).  Original and Reconstructed Boat image   We added Gaussian Noise to a Lena Image and denoised it using the trained dictionary.\nOriginal, Noisy and Denoised Lena image    MSE for noisy image = 68.0747 MSE for denoised image = 55.2772 PSNR for noisy image = 29.8009 PSNR for denoised image = 29.9672  Summary The Ramanujan Transform is a powerful transform and basis dictionary that can be used for sparse representation of an image. It can be trained efficiently and reconstructs images in a better way as compared to using DCT dictionary. For compressive sensing algorithm, the training time of the Ramanujan dictionary is more compared to the DCT dictionary training time, but it is more efficient in reconstruction. It is also good at denoising images, and is efficiently trained using the K-SVD algorithm.\n","date":1595077847,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595077847,"objectID":"72d8642b4f9a05c1ccc6178576ab9893","permalink":"https://archana1998.github.io/project/compressive-sensing/","publishdate":"2020-07-18T18:40:47+05:30","relpermalink":"/project/compressive-sensing/","section":"project","summary":"Used the Ramanujan Fourier Transform to do compressive sensing and denoising of images in the Ramanujan domain","tags":["Image Processing","Signal Processing"],"title":"Compressive Sensing and Denoising of Images using the Ramanujan Fourier Transform","type":"project"},{"authors":["Archana Swaminathan"],"categories":["Reviews"],"content":"This is a review of the ICLR 2017 paper by Zhang et. al. titled \u0026ldquo;Understanding Deep Learning requires rethinking generalization\u0026quot;Link to paper \nThe paper starts off with aiming to provide an introspection into what distinguishes networks that generalize well, from those who don’t.\nOne of the experiments conducted in the studies of the paper, is checking how well neural networks adapt to training when labels are randomized. Their findings establish that when the true data is completely randomly labelled, the training error that results is zero. Observations from this indicate that the effective capacity of neural networks is more than enough to memorize the entire dataset. Randomization of the labels is only a transformation of the data, and other learning parameters are constant and unchanged still. The resulting training time also increases by only a small factor. However, when this trained network is tested, it does badly. This indicates that just by randomizing labels, the generalization error can shoot up significantly without changing any other parameters of the experiment like the size of the model, the optimizer etc.\nAnother experiment conducted was that when the ground truth images were switched with random noise. This resulted in the networks training to zero training error, even faster than the case with the random labels. Varying the amount of randomization resulted in a steady deterioration of the generalization error, as the noise level increased. There were a wide variety of changes introduced into the dataset, that played with degrees and kinds of randomization with the pixels and labels. All of this still resulted in the networks able to fit the training data perfectly. A key takeaway from this is that the neural networks are able to capture the signals remaining in the data, while fitting the noise and randomization with brute force. The question that still remains unanswered after this is why some models generalize better than others, because it is evident that some decisions made while constructing model architectures do make a difference in its ability to generalize.\nTraditional approaches in statistical learning theory such as Rademacher complexity, VC dimension and uniform stability are threatened by the randomization experiments performed.\nThree specific regularizers are then considered to note the impact of explicit regularization, data augmentation, weight decay and dropout. These are tried out on Inception, Alexnet and MLPs on the CIFAR10 dataset, and later with ImageNet. Regularization helps to improve generalization performance, but the models still generalize well enough with the regularizers turned off. It was then inferred that this is more of a tuning parameter than a fundamental cause of good generalization. A similar result was noted with implicit regularization.\nAn interesting result proved in the paper was that there two layer depth networks of linear size, that can represent any labelling of the training data. A parallel approach in trying to understand the source of regularization for linear models was also not easy to point out. To sum up, this paper presents a thorough insight into how empirically easy optimization does not imply good regularization, and effective capacity of network architectures is better understood and defined.\n","date":1595061682,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595061682,"objectID":"5a3367d62d391224abafb9e8797a3c3e","permalink":"https://archana1998.github.io/post/regularization/","publishdate":"2020-07-18T14:11:22+05:30","relpermalink":"/post/regularization/","section":"post","summary":"A short and concise review of the ICLR paper","tags":["Machine Learning"],"title":"Understanding Deep Learning requires rethinking generalization","type":"post"}]